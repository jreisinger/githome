#!/usr/bin/env bash

INTERVAL=1500 # seconds

POMODORO=~/.pomodoro; [[ -d $POMODORO ]] || mkdir $POMODORO || exit 1
TODAY=$(date +%F); [[ -f $POMODORO/$TODAY ]] || touch $POMODORO/"$TODAY"

usage() {
    local msg
    read -r -d '' msg <<'EOF'
Pomodoro is a time management technique to fight internal and external
interruptions. It's based on 25-minute sessions of focused work broken by
five-minute breaks. Longer breaks are taken after four consecutive sessions.
Each work session is called a pomodoro.

  start     start pomodoro session (bell will ring twice when done)
  stop      interrupt pomodoro session (don't you dare :-)
  status    how are you doing today ...
EOF
    printf "%s\n" "$msg"
}

bell() {
    local cnt
    cnt=$1
    for (( i = 0; i < "$cnt"; i++ )); do
        printf '\a'
        sleep 0.3 
    done
}

count() {
    local cnt
    cnt=$(wc -l "$POMODORO/$TODAY" | cut -d ' ' -f 1)
    for (( i = 0; i < "$cnt"; i++ )); do
        [[ $i -ne 0 ]] && [[ $((i%4)) -eq 0 ]] && printf " "
        printf "🍅"
    done
    # to prefix with space also the remaining time in status if we made four pomodori
    [[ $cnt -ne 0 ]] && [[ $((cnt%4)) -eq 0 ]] && printf " "
}

elapsed() {
    local start now elapsed
    start=$(date -r $POMODORO/running +%s)
    now=$(date +%s)
    elapsed=$((now-start))
    date -d @${elapsed} +%M:%S
}

remaining() {
    local start now remaining
    start=$(date -r $POMODORO/running +%s)
    now=$(date +%s)
    remaining=$((INTERVAL-(now-start)))
    date -d @${remaining} +%M:%S
}

case $1 in
status)
    count
    if [[ -e $POMODORO/running ]]; then
        printf "(%s)\n" "$(remaining)"
    else
        printf "\n"
    fi
    ;;
start)
    if [[ -e $POMODORO/running ]]; then
        printf "already running for %s\n" "$(elapsed)"
        exit 1
    else
        sleep $INTERVAL                     && \
        rm $POMODORO/running                && \
        date +%H:%M >> $POMODORO/"$TODAY"   && \
        bell 2                              &
        echo $! > $POMODORO/running # save PID of last backgrounded command
    fi
    ;;
stop)
    if [[ -e $POMODORO/running ]]; then
        printf "stopped after %s\n" "$(elapsed)"
        PID="$(cat $POMODORO/running)"
        # shellcheck disable=SC2009
        PGID=$(ps -o pgid= "$PID" | grep -o '[0-9]*')
        kill -- -"$PGID" # kill the whole process group
        rm $POMODORO/running
    else
        printf "not running\n"
        exit 1
    fi 
    ;;
*)
    usage
esac